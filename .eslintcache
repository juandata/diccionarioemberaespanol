[{"C:\\Users\\juand\\Documents\\diccionario\\src\\index.js":"1","C:\\Users\\juand\\Documents\\diccionario\\src\\reportWebVitals.js":"2","C:\\Users\\juand\\Documents\\diccionario\\src\\App.js":"3","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\AppBarHeader.js":"4","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\TextInput.js":"5","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\Translation.js":"6","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\SimpleSelect.js":"7","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\SelectWords.js":"8","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\CircularLoader.js":"9","C:\\Users\\juand\\Documents\\diccionario\\src\\Translator\\TensorFlowModels.js":"10","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\TextInputTranslation.js":"11"},{"size":646,"mtime":1606688699176,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1606488701778,"results":"14","hashOfConfig":"13"},{"size":3984,"mtime":1610734438876,"results":"15","hashOfConfig":"13"},{"size":1162,"mtime":1606675749121,"results":"16","hashOfConfig":"13"},{"size":1147,"mtime":1610723242783,"results":"17","hashOfConfig":"13"},{"size":9484,"mtime":1610734375268,"results":"18","hashOfConfig":"13"},{"size":1862,"mtime":1606676415307,"results":"19","hashOfConfig":"13"},{"size":2681,"mtime":1606879821140,"results":"20","hashOfConfig":"13"},{"size":485,"mtime":1606588359136,"results":"21","hashOfConfig":"13"},{"size":1147,"mtime":1610665888601,"results":"22","hashOfConfig":"13"},{"size":1167,"mtime":1610723455286,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"a5eqdi",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\juand\\Documents\\diccionario\\src\\index.js",[],["51","52"],"C:\\Users\\juand\\Documents\\diccionario\\src\\reportWebVitals.js",[],"C:\\Users\\juand\\Documents\\diccionario\\src\\App.js",["53"],"import React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport AppBarHeader from './Atoms/AppBarHeader';\nimport TextInput from './Atoms/TextInput';\nimport TextInputTranslation from './Atoms/TextInputTranslation';\nimport SimpleSelect from './Atoms/SimpleSelect';\nimport Translation from './Atoms/Translation';\nimport SelectWords from './Atoms/SelectWords';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\nimport TensorFlowModels from './Translator/TensorFlowModels';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    marginTop: '5px'\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  cardStyles: {\n    flexGrow: 1,\n    marginTop: '15px'\n  },\n  dividerStyles : {\n    marginTop : 15\n  }\n}));\n\n/**\n * Punto de entrada de la aplicación, renderiza toda la app. \n */\nfunction App() {\n  //clase para definir el estilo de los componentes\n  const classes = useStyles();\n  //estado de la app usando rect hooks\n  const [userTextInput, setUserTextInput] = useState('');\n  const [userTextInputTranslation, setUserTextInputTranslation] = useState('');\n  const [translationSelected, setTranslationSelected] = useState('Español-Embera');\n  const [translationSelectedTranslation, setTranslationSelectedTranslation] = useState('Español-Embera');\n  //listeners\n  const handleChange = (ev) => setUserTextInput(ev);\n  const handleChangeTranslation = (ev) => setUserTextInputTranslation(ev);\n  const selectChanged = (ev) => setUserTextInput(ev);\n  const simpleSelectHandleChange = (ev) => setTranslationSelected(ev);\n  const simpleSelectHandleChangeTranslation = (ev) => setTranslationSelectedTranslation(ev);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AppBarHeader />\n      </header>\n      <section>\n      <Grid container className={classes.root} spacing={2} justify='center' direction=\"column\" alignContent='center'>\n      <Typography variant=\"h4\" align=\"center\" gutterBottom>\n        Diccionario\n      </Typography>\n        \n        <Grid container className={classes.root} spacing={2} justify='center' alignContent='center'>\n          <TextInput\n            handleChange={handleChange} />\n          <SimpleSelect\n            simpleSelectHandleChange={simpleSelectHandleChange}\n            value={translationSelected} />\n          <SelectWords Spanish={true} selectWordsOnChange={selectChanged} />\n          <SelectWords Spanish={false} selectWordsOnChange={selectChanged} />\n        </Grid>\n        </Grid>\n      </section>\n      <section>\n        <Grid container className={classes.cardStyles} spacing={2} justify='center' alignContent='center'>\n          <Translation textToTranslate={userTextInput}\n            kindOfTranslation={translationSelected} translation={false} />\n        </Grid>\n      </section>\n      <Divider className={classes.dividerStyles} />\n      <section>\n        <Grid container className={classes.cardStyles} spacing={2} justify='center' alignContent='center' direction=\"column\">\n        <Typography variant=\"h4\" align=\"center\" gutterBottom>\n        Traductor\n      </Typography>\n      <Grid container className={classes.cardStyles} spacing={2} justify='center' alignContent='center'>\n      <TextInputTranslation\n            handleChange={handleChangeTranslation} />\n              <SimpleSelect\n            simpleSelectHandleChange={simpleSelectHandleChangeTranslation}\n            value={translationSelectedTranslation} />\n      </Grid>\n        </Grid>\n      </section>\n      <section>\n        <Grid container className={classes.cardStyles} spacing={2} justify='center' alignContent='center'>\n          <Translation textToTranslate={userTextInputTranslation}\n            kindOfTranslation={translationSelectedTranslation} translation={true}/>\n        </Grid>\n      </section>\n      <Divider className={classes.dividerStyles} />\n    </div>\n  );\n}\n\nexport default App;","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\AppBarHeader.js",[],"C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\TextInput.js",[],"C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\Translation.js",["54"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport palabras from '../Assets/palabras.json';\r\nimport frases from '../Assets/frases.json';\r\nimport CircularLoader from './CircularLoader';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n    fontSize: 14\r\n  },\r\n});\r\n/**\r\n * Muestra el tipo de palabra a traducir y su traducción\r\n * @param {string} kindOfTranslation el tipo de traducción a realizar (Embera-Español o Español-Embera) \r\n * @param {string} textToTranslate es el texto a traducir, proviene de TextInput o de SelectWords\r\n */\r\nexport default function Translation(props) {\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(false);\r\n  const [translation, setTranslation] = useState('');\r\n\r\n  //Comentarios:\r\n  // De forma similar a componentDidMount y componentDidUpdate en clases de React\r\n  useEffect(() => {\r\n    //En el código inferior creo el algoritmo de búsqueda de las palabras\r\n    const text = props.textToTranslate;\r\n    //elimino los símbolos especiales como ?, ! y tíldes para buscar en el objeto JSON de las palabras\r\n    const specialSymbols = /[¿?¡!]/g;\r\n    const textReplaced = text !== undefined ? text.replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase() : '';\r\n    let entriesArray = [];\r\n    //si se trata de traducción se usan las frases, de lo contrario las palabras para el diccionario\r\n    const entriesArrayCheck = props.translation ? Object.entries(frases) : Object.entries(palabras);\r\n    let index = 0;\r\n    //revisar si se trata de un traduccion de palabra o frase\r\n    if(!props.translation){\r\n      if (entriesArrayCheck.length >= process.env.REACT_APP_CHECK_LENGTH) {\r\n        for (const property in palabras) {\r\n          index++;\r\n          if (index <= process.env.REACT_APP_CHECK_LENGTH) {\r\n            entriesArray.push([property, palabras[property]])\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      //se trata de una traduccion de frase\r\n      entriesArray = entriesArrayCheck;\r\n    }\r\n    if(!props.translation){\r\n      let wordReplacedFinal;\r\n    let temporalArrayForSavingInnerArrays = [];\r\n    let wordsFormatted = entriesArray.map((word) => {\r\n      const index = props.kindOfTranslation === 'Español-Embera' ? 0 : 1;\r\n      let wordReplaced;\r\n      //revisar si la palabra que se revisa es un arreglo\r\n      if (Array.isArray(word[index])) {\r\n        wordReplacedFinal = word[index].map((innerWord) => {\r\n          let innerWordReplaced = innerWord.replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n          temporalArrayForSavingInnerArrays.push(innerWordReplaced);\r\n          return innerWordReplaced;\r\n        })\r\n\r\n      } else {\r\n        return wordReplaced = word[index].replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n      }\r\n      if (index !== 0) {\r\n        wordReplacedFinal.forEach((el) => { wordReplaced = el; });\r\n      }\r\n      return wordReplaced;\r\n    });\r\n    let wordsFormattedFinal = [];\r\n    let wordsIncluded;\r\n    if (props.kindOfTranslation === 'Embera-Español') {\r\n      //si el tipo de traduccion es embera a español, pueden haber arrays anidados, hacer push con los arrays\r\n      wordsFormattedFinal = [...wordsFormatted, ...temporalArrayForSavingInnerArrays]\r\n      wordsIncluded = wordsFormattedFinal.includes(textReplaced);\r\n\r\n    } else {\r\n      wordsIncluded = wordsFormatted.includes(textReplaced);\r\n    }\r\n    if (wordsIncluded) {\r\n      entriesArray.find((word) => {\r\n        const index = props.kindOfTranslation === 'Español-Embera' ? 0 : 1;\r\n        const indexTwo = index === 0 ? 1 : 0;\r\n        let wordReplaced;\r\n        if (Array.isArray(word[index])) {\r\n          wordReplaced = word[index].map((innerWord) => innerWord.replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase());\r\n        } else {\r\n          wordReplaced = word[index].replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n        }\r\n        if (typeof wordReplaced !== 'object' && wordReplaced === textReplaced) {\r\n          //la palabra que se ingresa en el input coincide con una palabra en el objeto json\r\n          //y se procede a actualizar la vista con la palabra traducida\r\n          if (Array.isArray(word[indexTwo])) {\r\n            //la palabra que coincide es un array, por lo que se muestran las dos traducciones posibles\r\n            setTranslation(word[indexTwo][0] + ' / ' + word[indexTwo][1])\r\n          } else {\r\n            setTranslation(word[indexTwo]);\r\n          }\r\n          setLoading(true);\r\n        } else if (typeof wordReplaced === 'object') {\r\n          //es un arreglo y es necesario iterar para comparar \r\n          wordReplaced.forEach((el) => {\r\n            if (el === textReplaced) {\r\n              //la palabra que se ingresa en el input coincide con una palabra en el objeto json\r\n              //y se procede a actualizar la vista con la palabra traducida\r\n              setTranslation(word[indexTwo])\r\n              setLoading(true);\r\n            }\r\n          })\r\n        }\r\n        return null;\r\n      }\r\n      )\r\n    } else if (textReplaced !== '') {\r\n      setTranslation('Palabra no encontrada');\r\n    } else {\r\n      setTranslation('');\r\n    }\r\n    }\r\n    else {\r\n      //traducir frase\r\n      //verificar si se trata de una traduccion del español al embera\r\n      if(props.kindOfTranslation === 'Español-Embera'){\r\n        //traduccion del español al embera\r\n        let coincide = false;\r\n        const specialSymbols = /[¿?¡!.,:; ]/g;\r\n        const textoEnMinusculaSinCaracteresEspeciales =   props.textToTranslate.replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n        //const textoEnFrasesEnMinusculasSinCaracteresEspeciales; \r\n        entriesArray.every(el=>{\r\n          const fraseEnEspanolEnMinusculasSinCaracteresEspeciales = el[0].replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase(); \r\n          if(textoEnMinusculaSinCaracteresEspeciales === fraseEnEspanolEnMinusculasSinCaracteresEspeciales){\r\n            //la frase en la lista coincide con el input del usuario\r\n            coincide = true;\r\n            setTranslation(el[1]);\r\n            setLoading(true);\r\n            return false;\r\n          } else {\r\n            coincide = false;\r\n            return true;\r\n          }\r\n        });\r\n        //si coincide traducir el texto, si no avisar al usuario que la frase no fue encontrada\r\n        if(!coincide){\r\n          setTranslation('Frase no encontrada');\r\n        } \r\n      } else {\r\n        //traducccion del embera al espanol\r\n          let coincide = false;\r\n          const specialSymbols = /[¿?¡!.,:; ]/g;\r\n          const textoEnMinusculaSinCaracteresEspeciales =   props.textToTranslate.replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n          entriesArray.every(el=>{\r\n            const fraseEnEmberaEnMinusculasSinCaracteresEspeciales = el[1].replace(specialSymbols, '').normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase(); \r\n            if(textoEnMinusculaSinCaracteresEspeciales === fraseEnEmberaEnMinusculasSinCaracteresEspeciales){\r\n              //la frase en la lista coincide con el input del usuario\r\n              coincide = true;\r\n              setTranslation(el[0]);\r\n              setLoading(true);\r\n              return false;\r\n            } else {\r\n              coincide = false;\r\n              return true;\r\n            }\r\n          });\r\n          //si coincide traducir el texto, si no avisar al usuario que la frase no fue encontrada\r\n          if(!coincide){\r\n            setTranslation('Frase no encontrada');\r\n          } \r\n\r\n      }\r\n    }\r\n\r\n  }, [props.textToTranslate, props.kindOfTranslation]);\r\n  useEffect(() => {\r\n    //Agrego el loader por un segundo y medio antes de mostrar la palabra traducida\r\n    setTimeout(() => setLoading(false), 1500);\r\n  }, [loading]);\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Grid container justify='center'>\r\n          <Typography className={classes.title} color=\"primary\" gutterBottom>\r\n            {props.kindOfTranslation}\r\n          </Typography>\r\n        </Grid>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          {!props.translation ? 'Palabra' : 'Frase'}\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          {props.textToTranslate}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          Traducción\r\n        </Typography>\r\n        {loading ?\r\n          <CircularLoader /> :\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            {translation}\r\n          </Typography>}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nTranslation.propTypes = {\r\n  kindOfTranslation: PropTypes.string,\r\n  textToTranslate: PropTypes.string\r\n};","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\SimpleSelect.js",[],"C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\SelectWords.js",[],"C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\CircularLoader.js",[],["55","56"],"C:\\Users\\juand\\Documents\\diccionario\\src\\Translator\\TensorFlowModels.js",["57","58"],"import React, { useState } from 'react';\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\n// Define a model for linear regression.\r\nconst model = tf.sequential();\r\nmodel.add(tf.layers.dense({units: 1, inputShape: [1]}));\r\n\r\nmodel.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\r\n\r\n// Generate some synthetic data for training.\r\nconst xs = tf.tensor2d([1, 2, 3, 4], [4, 1]);\r\nconst ys = tf.tensor2d([1, 3, 5, 7], [4, 1]);\r\n\r\n// Train the model using the data.\r\nmodel.fit(xs, ys, {epochs: 10}).then(() => {\r\n  // Use the model to do inference on a data point the model hasn't seen before:\r\n  model.predict(tf.tensor2d([5], [1, 1])).print();\r\n  // Open the browser devtools to see the output\r\n});\r\n  \r\n\r\n/*import * as tf from '@tensorflow/tfjs';\r\n\r\n\r\nconst HOSTED_URLS = {\r\n    model:\r\n        'https://storage.googleapis.com/tfjs-models/tfjs/translation_en_fr_v1/model.json',\r\n    metadata:\r\n        'https://storage.googleapis.com/tfjs-models/tfjs/translation_en_fr_v1/metadata.json'\r\n  };\r\n  \r\n  const LOCAL_URLS = {\r\n    model: 'http://localhost:1235/resources/model.json',\r\n    metadata: 'http://localhost:1235/resources/metadata.json'\r\n  };*/","C:\\Users\\juand\\Documents\\diccionario\\src\\Atoms\\TextInputTranslation.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":12,"column":8,"nodeType":"65","messageId":"66","endLine":12,"endColumn":24},{"ruleId":"67","severity":1,"message":"68","line":189,"column":6,"nodeType":"69","endLine":189,"endColumn":54,"suggestions":"70"},{"ruleId":"59","replacedBy":"71"},{"ruleId":"61","replacedBy":"72"},{"ruleId":"63","severity":1,"message":"73","line":1,"column":8,"nodeType":"65","messageId":"66","endLine":1,"endColumn":13},{"ruleId":"63","severity":1,"message":"74","line":1,"column":17,"nodeType":"65","messageId":"66","endLine":1,"endColumn":25},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'TensorFlowModels' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.translation'. Either include it or remove the dependency array.","ArrayExpression",["77"],["75"],["76"],"'React' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},"Update the dependencies array to be: [props.textToTranslate, props.kindOfTranslation, props.translation]",{"range":"80","text":"81"},[8274,8322],"[props.textToTranslate, props.kindOfTranslation, props.translation]"]